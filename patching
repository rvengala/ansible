
# Ansible for Operating Systems Patch Management

# Demo Ansible playbook to perform patching on RHEL/Centos server

- hosts: dev-redhat
  become_user: root
  serial: 2

  tasks:
	# purpose of this task to check if application is running or stopped
	- name: verify if application/database processes are not running
	  shell: if ps -eaf | egrep 'apache|http'|grep -v grep > /dev/null ; then echo 'process_running';else echo 'process_not_running';fi
	  ignore_errors: true
	  register: app_process_check
	  
	# this task is decision,play will fail/quit, if application is running
	- name: decision point to start patching
	 fail: msg="{{ inventory_hostname }} have running application. Please stop the application first, then attempt patching."
	 when: app_process_check.stdout == "process_running"
	 
	# this task will upgrade/install the rpm's if application is stopped
	- name: upgrade all packages on the server
	  yum:
	    name="kernal"
	    state=latest
	  when: app_process_check.stdout == "process_not_running" and ansible_distribution == 'CentOS' or ansible_distribution == 'Red Har Enterprise Linux' register: yum_update



  # This task is to check if Kernal update happend and system needs reboot or not
  - name: check if reboot required after kernel update. 
    shell: KERNEL_NEW=$(rpm -q --last kernel | head -l | awk '{print $1}' | sed 's/kernerl.//'); KERNEL_NOW=$(uname -r); if [ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_neeeded"; fi
    ignore_errors: true
    register: reboot_required
    
   # This task is to restart the system
   - name: restart system
     command: shutdown -r +1 "rebooting Syste, After Patching"
     async: 0
     poll: 0
     shen: reboot_required.stdout == "reboot_needed"
     register_errors: true
     
    # This taskk is to confirm, system is up and respinding to ssh
    - name: pause for 180  secs 
      pause: 
        minutes: 3
    
    # This task is to confim, system is up and responding to ssh
    - name: check if system responding to ssh
      loacl_action:
        module: wait_for
          host={{ inventory_hostname }}
          post=22
          delay=15
          timeout=300
          state=started
      when: reboot_started|changed           






